from aiogram.utils.markdown import text
import parcer
import config
import asyncio
import datetime
import logging
import database

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType

API_TOKEN = config.TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

button_check = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏", callback_data="button_check")
button_add = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="button_add")
button_edit = InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="button_edit")
button_delete = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="button_delete")
button_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="button_back")
button_deleteAll = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –í–ê–®–ò —Å—Å—ã–ª–∫–∏", callback_data="button_deleteAll")

button_addUser = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="button_addUser")
button_deleteUser = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="button_deleteUser")
button_editUser = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="button_editUser")

markup_main = InlineKeyboardMarkup()
markup_main.add(button_check)
markup_main.add(button_add)
# markup_main.add(button_edit)
markup_main.add(button_delete)
markup_main.add(button_deleteAll)

markup_back = InlineKeyboardMarkup()
markup_back.add(button_back)

markup_admin = InlineKeyboardMarkup()
markup_admin.add(button_addUser)
markup_admin.add(button_deleteUser)
markup_admin.add(button_back)

flags = [False, False, False, False, False, False]


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–∏–≤–µ—Ç!üëãüèª –Ø –±–æ—Ç –í–∞–Ω—è! –†–∞–±–æ—Ç–∞—é—â–∏–π —Å –î–∑–µ–Ω.\n"
                                                            "–Ø ‚Äì –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä noindex –Ω–∞ —Ç–≤–æ–∏—Ö —Å—Ç–∞—Ç—å—è—Ö –≤ –Ø–Ω–¥–µ–∫—Å –î–∑–µ–Ω.\n\n"
                                                            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—Å–µ —Ç–≤–æ–∏ —Å—Ç–∞—Ç—å–∏ –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –¥–æ–ª–æ–∂—É, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è noindex, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –≤–æ–≤—Ä–µ–º—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏ –Ω–µ —É–ª–µ—Ç–µ—Ç—å –≤ –±–∞–Ω üëæ\n\n"
                                                            "–Ø —Ä–∞–±–æ—Ç–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ –∏ –±–µ–∑ —Å–±–æ–µ–≤, 24 —á–∞—Å–∞ –≤ —Å—É—Ç–∫–∏.\n\n"
                                                            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    if await database.check_user(message.from_user.username) == None:
        await bot.send_message(chat_id=message.from_user.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É)")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=markup_main, parse_mode="html")


@dp.message_handler(commands=['PASSWORDtoADMIN'])
async def send_welcome(message: types.Message):
    if await database.check_admin(message.from_user.username) == None:
        await bot.send_message(chat_id=message.from_user.id, text="–ù–µ—Ç –ø—Ä–∞–≤(–≠—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç)")
        return
    await message.answer("–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨", reply_markup=markup_admin, parse_mode="html")


@dp.message_handler()
async def echo(message: types.Message):
    if await database.check_user(message.from_user.username) == None:
        await bot.send_message(chat_id=message.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É)")
        return
    if not (str(message.text).find("zen.yandex.ru/media/id/") == -1) and flags[0]:
        count = await database.increase_count(message.from_user.username)
        if not count == 0:
            await database.insert_link(message.text, message.from_user.id)
            flags[0] = False
            await bot.send_message(chat_id=message.from_user.id, text="–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å "+str(count)+" —Å—Ç–∞—Ç–µ–π")
        else:
            await bot.send_message(chat_id=message.from_user.id, text="–í–∞—à –ª–∏–º–∏—Ç —Å—Ç–∞—Ç–µ–π –∏—Å—á–µ—Ä–ø–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–ª—É—á—à–∏—Ç–µ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É")
    elif not (str(message.text).find("zen.yandex.ru/media/id/") == -1) and flags[1]:
        flags[1] = False
        print("test!!!")
    elif not (str(message.text).find("zen.yandex.ru/media/id/") == -1) and flags[2]:
        await database.decrease_count(message.from_user.username)
        await database.delete_link(message.text)
        flags[2] = False
        await bot.send_message(chat_id=message.from_user.id, text="–°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞")
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏" and flags[3]:
        await database.delete_all_link(message.from_user.id)
        flags[3] = False
        await bot.send_message(chat_id=message.from_user.id, text="–í—Å–µ –≤–∞—à–∏ —Å—Ç–∞—Ç—å–∏ —É–¥–∞–ª–µ–Ω—ã")
    elif not (str(message.text).find("–î–æ–±–∞–≤–∏—Ç—å(") == -1) and flags[4]:
        await add_user(message.text)
        flags[4] = False
        await bot.send_message(chat_id=message.from_user.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
    elif not (str(message.text).find("–£–¥–∞–ª–∏—Ç—å(") == -1) and flags[5]:
        await delete_user(message.text)
        print("testDelete")
        flags[5] = False
        await bot.send_message(chat_id=message.from_user.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω")
    else:
        await bot.send_message(chat_id=message.from_user.id, text="–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ", reply_markup=markup_main, parse_mode="html")


@dp.callback_query_handler(text="button_check")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    for i in database.show_links(callback_query.from_user.id):
        await bot.send_message(chat_id=callback_query.from_user.id, text=i)


@dp.callback_query_handler(text="button_add")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    flags[0] = True
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ –±–∞–∑—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", reply_markup=markup_back)


@dp.callback_query_handler(text="button_edit")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    flags[1] = True
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="–ü–û–ö–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: url - 1/0\n–ì–¥–µ url - —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é, –∞ 1 - –ø—Ä–æ–≤–µ—Ä—è—Ç—å, 0 - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å", reply_markup=markup_back)


@dp.callback_query_handler(text="button_delete")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    flags[2] = True
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é –∏–∑ –±–∞–∑—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", reply_markup=markup_back)


@dp.callback_query_handler(text="button_back")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å: ", chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=markup_main, parse_mode="html")


@dp.callback_query_handler(text="button_deleteAll")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    flags[3] = True
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è', reply_markup=markup_back)


@dp.callback_query_handler(text="button_addUser")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if await database.check_user(callback_query.from_user.id) == None:
        await bot.send_message(chat_id=callback_query.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É)")
        return
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,
                                text="–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
                                "–î–æ–±–∞–≤–∏—Ç—å(–ò–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç–∞—Ç–µ–π)\n"
                                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–¥–Ω–∞ –∑–∞–ø—è—Ç–∞—è! –ü—Ä–∏–≤–µ–ª–µ–≥–∏–∏ (0-–∞–¥–º–∏–Ω, 1-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)\n"
                                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ —Å—Ç–∞—Ç–µ–π (-1 –µ—Å–ª–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)\n"
                                "–ü—Ä–∏–º–µ—Ä: –î–æ–±–∞–≤–∏—Ç—å(username, 1, 30, 5)",
                                reply_markup=markup_back)
    flags[4] = True


@dp.callback_query_handler(text="button_deleteUser")
async def process_callback_check(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if await database.check_user(callback_query.from_user.id) == None:
        await bot.send_message(chat_id=callback_query.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É)")
        return
    print("testDeleteButton")
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id,
                                text='–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"–£–¥–∞–ª–∏—Ç—å(–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"',
                                reply_markup=markup_back)
    flags[5] = True


# unknown message
@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(msg: types.Message):
    message_text = text("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.\n–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /help")
    await msg.reply(ContentType)


async def scheduled():
    while True:
        await asyncio.sleep(config.Timer1)
        for row in database.check_links():
            print(row[0])
            if parcer.check(row[0]):
                await bot.send_message(chat_id=row[1], text="NOINDEX\n"+row[0])
                await database.delete_link(row[0])
        await asyncio.sleep(config.Timer2)


async def add_user(text):
    text = text.replace(' ', '')
    text = text.replace('–î–æ–±–∞–≤–∏—Ç—å(', '')
    text = text[:-1]
    data = text.split(',')
    await database.insert_user(data[0], 13, "dateReg", data[1], data[2], data[3])


async def delete_user(text):
    text = text.replace(' ', '')
    text = text.replace('–î–æ–±–∞–≤–∏—Ç—å(', '')
    text = text[:-1]
    await database.delete_user(text)
    print('teeest')


def addAdmins():
    for i in config.admins:
        database.insert_user2(i[0],i[1], 'dateReg', i[2], i[3], i[4])


async def scheduled():
    while True:
        
        await asyncio.sleep(86400)


if __name__ == '__main__':
    addAdmins()
    dp.loop.create_task(scheduled())
    executor.start_polling(dp, skip_updates=True)

